{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","ErrorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robot","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","erros","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobot","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAeeA,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAE5B,OACC,yBAAKC,UAAU,qDACd,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cACjB,6BACE,4BAAKF,GACL,2BAAIC,MCeGK,EArBE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB,OACC,6BAEIA,EAAMC,KAAI,SAACC,EAAMC,GACjB,OACE,kBAAC,EAAD,CACIC,IAAKD,EACLR,GAAIK,EAAMG,GAAGR,GACbF,KAAMO,EAAMG,GAAGV,KACfC,MAAOM,EAAMG,GAAGT,aCEbW,EAbG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAChC,OACC,6BACE,2BACEX,UAAU,mCACVY,KAAK,SACFC,YAAY,gBACZC,SAAUH,MCIJI,EAVA,SAACC,GACf,OACC,yBAAKC,MAAS,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACtEJ,EAAMK,WCkBKC,E,kDArBd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACZC,UAAW,GAHK,E,8DAOGC,EAAQC,GACzBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAK1B,OAAGG,KAAKJ,MAAMC,SACN,2DAEDG,KAAKX,MAAMK,a,GAjBIQ,aC0DZC,G,wDAjDX,aAAgB,IAAD,8BACd,gBAeDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAElB,YAAasB,EAAMC,OAAOC,SAf1C,EAAKX,MAAS,CACTnB,MAAO,GACPM,YAAa,IAJJ,E,gEAQM,IAAD,OACnByB,MAAM,8CACFC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAExB,MAAMmC,S,+BAYlC,IAAD,EACwBZ,KAAKJ,MAA7BnB,EADA,EACAA,MAAQM,EADR,EACQA,YACV8B,EAAgBpC,EAAMqC,QAAO,SAAArC,GAClC,OAAOA,EAAMP,KAAK6C,cAAcC,SAASjC,EAAYgC,kBAGtD,OAAqB,IAAjBtC,EAAMwC,OACF,0CAGA,yBAAK5C,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAU3B,MAAOoC,W,GAvChBX,cCIEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACD,kBAAC,EAAD,MAENC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.656d89a6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\t\r\n\treturn (\r\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shawdow-5'>\r\n\t\t <img alt='robot' src={`https://robohash.org/${id}?200*200`}/>\r\n\t\t    <div>\r\n\t\t      <h1>{name}</h1>\r\n\t\t      <p>{email}</p>\r\n\t\t    </div>\r\n\t\t</div>\r\n    );\r\n}\r\n\r\nexport default Card;     ","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robot }) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t   { \r\n\t\t   \trobot.map((user, i)=> {\r\n\t\t    return (\r\n\t\t     \t<Card \r\n\t\t          key={i} \r\n\t\t          id={robot[i].id} \r\n\t\t          name={robot[i].name} \r\n\t\t          email={robot[i].email}\r\n\t\t        />\r\n\t\t    );\r\n\t       }) \r\n\t\t  } \t\r\n\t\t</div>   \r\n\r\n\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) =>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t  <input \r\n\t\t    className='pa3 ba b--green bg-lightest-blue'\r\n\t\t    type='search'\r\n\t        placeholder='search robots' \r\n\t        onChange={searchChange}\r\n\t      />\r\n        </div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style = {{ overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n            \r\n\t\t);\r\n\r\n};\r\n\r\nexport default Scroll;","import React , { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError : false\r\n\t\t}\r\n\t}\r\n\r\n    componentDidCatch(erros , info) {\r\n    \tthis.setState({ hasError: true})\r\n\r\n    }\r\n\r\n    render() {\r\n    \tif(this.state.hasError){\r\n    \t\treturn <h1>oooop..  That is not good..</h1>\r\n    \t}\r\n    \treturn this.props.children\r\n\r\n    }\r\n}    \r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundry from './ErrorBoundry'\r\nimport './App.css';\r\n\r\n\r\n\r\n\r\nclass App extends Component {\r\n    constructor()  {\r\n    \tsuper()\r\n    \tthis.state =  {\r\n          robot: [],\r\n          searchfield: ''\r\n    \t}\r\n    }\r\n    \r\n    componentDidMount() {\r\n    \tfetch('https://jsonplaceholder.typicode.com/users')\r\n    \t   .then(response=> response.json())\r\n    \t   .then(users => this.setState({ robot:users }));\r\n    \t   \r\n    }\r\n\r\n\r\n    onSearchChange = (event) => {\r\n    \tthis.setState({ searchfield: event.target.value })\r\n    \t\r\n\t\t\r\n\t}\r\n      \r\n\r\n\trender() {\r\n\t\tconst { robot , searchfield } = this.state;\r\n\t\tconst filteredRobot = robot.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\r\n\t\tif (robot.length === 0){\r\n\t\t\treturn <h1> LOADING..</h1>\r\n\t\t} else{\r\n            return(\r\n\t\t        <div className='tc'>\r\n\t\t          <h1>ROBOFRIENDS</h1>\r\n\t\t          <SearchBox searchChange={this.onSearchChange}/>\r\n\t\t          <Scroll>\r\n\t\t            <ErrorBoundry>\r\n\t\t               <CardList robot={filteredRobot}/>\r\n\t\t            </ErrorBoundry>\r\n\t\t          </Scroll>\r\n\r\n\t\t        </div>\r\n\t        );\r\n        }\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/serviceWorker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.ServiceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n\t       <App />\n ,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}